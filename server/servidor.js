import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import multer from 'multer';
import sharp from 'sharp';
import fs from 'fs/promises';

// Configura√ß√£o do dotenv
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const caminhoEnv = path.resolve(__dirname, '.env');
dotenv.config({ path: caminhoEnv });

// Importar todos os modelos
import Localizacao from './modelos/localizacao.js';
import Profissional from './modelos/profissional.js';
import Usuario from './modelos/usuario.js';
import Avaliacao from './modelos/avaliacao.js';
import HCurricular from './modelos/hcurricular.js';
import HProfissional from './modelos/hprofissional.js';

const app = express();

// Configura√ß√£o CORS
app.use(cors({
  origin: true,
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
  allowedHeaders: ['Content-Type', 'Authorization', 'Origin', 'X-Requested-With', 'Accept']
}));

app.options('*', cors());

app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Configura√ß√£o para servir arquivos est√°ticos
app.use('/uploads', express.static(path.join(__dirname, 'public', 'uploads')));

// Conex√£o com MongoDB
const mongoURI = process.env.MONGO_URI || 'mongodb://localhost:27017/guiaaodispor';
console.log('üîó Tentando conectar ao MongoDB...');

mongoose.connect(mongoURI)
    .then(() => console.log('‚úÖ Conex√£o com o MongoDB estabelecida!'))
    .catch(err => {
      console.error('‚ùå Erro ao conectar com o MongoDB:', err);
    });

// Middleware de logging
app.use((req, res, next) => {
  console.log(`üåê ${req.method} ${req.path}`, req.body ? JSON.stringify(req.body).substring(0, 200) : '');
  next();
});

// Middleware para verificar JWT
const verificarToken = (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  
  // Rotas p√∫blicas que n√£o precisam de token
  const publicRoutes = [
    '/api/auth/login',
    '/api/auth/validar-email',
    '/api/usuarios',
    '/api/profissionais',
    '/api/localizacoes',
    '/health',
    '/api/health',
    '/'
  ];
  
  // Verifica se a rota atual √© p√∫blica
  const isPublicRoute = publicRoutes.some(route => {
    if (route === '/api/profissionais' && req.method === 'GET') return true;
    if (req.path.startsWith(route) && (req.method === 'POST' || req.method === 'GET')) {
      return true;
    }
    return false;
  });

  if (isPublicRoute) {
    return next();
  }

  if (!token) {
    return res.status(401).json({ 
      status: 'erro', 
      message: 'Acesso negado. Token n√£o fornecido.' 
    });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || '7282');
    req.usuario = decoded;
    next();
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o do token:', error.message);
    return res.status(401).json({ 
      status: 'erro', 
      message: 'Token inv√°lido ou expirado.' 
    });
  }
};

// ========== ROTAS P√öBLICAS (ANTES DO MIDDLEWARE) ==========

// Rota raiz
app.get('/', (req, res) => {
  res.json({ 
    message: 'Bem-vindo √† API do Guia ao Dispor!',
    timestamp: new Date().toISOString()
  });
});

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    database: mongoose.connection.readyState === 1 ? 'Conectado' : 'Desconectado'
  });
});

app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    database: mongoose.connection.readyState === 1 ? 'Conectado' : 'Desconectado'
  });
});

// ========== ROTA P√öBLICA PARA PROFISSIONAIS ==========

app.get('/api/profissionais', async (req, res) => {
  try {
    console.log('üîç Buscando profissionais...');
    
    // Primeiro, tenta buscar do MongoDB
    let profissionais = [];
    
    // Verifica se h√° profissionais no banco
    const count = await Profissional.countDocuments();
    console.log(`üìä Profissionais no banco: ${count}`);
    
    if (count > 0) {
      // Busca profissionais reais
      profissionais = await Profissional.find({})
        .populate('localizacao')
        .select('-senha')
        .lean();
      
      console.log(`‚úÖ Encontrados ${profissionais.length} profissionais no banco`);
    } else {
      // Se n√£o h√° profissionais, cria alguns de exemplo
      console.log('üìù Criando profissionais de exemplo...');
      
      // Cria localiza√ß√£o exemplo
      const localizacao = await Localizacao.create({
        nome: 'S√£o Paulo',
        cidade: 'S√£o Paulo',
        estado: 'SP'
      });
      
      // Cria profissionais exemplo
      await Profissional.create([
        {
          nome: 'Maria Silva',
          desc: '10 anos de experi√™ncia em enfermagem geri√°trica',
          email: 'maria@exemplo.com',
          senha: await bcrypt.hash('senha123', 10),
          localizacao: localizacao._id
        },
        {
          nome: 'Jo√£o Santos',
          desc: '5 anos como cuidador de idosos', 
          email: 'joao@exemplo.com',
          senha: await bcrypt.hash('senha123', 10),
          localizacao: localizacao._id
        }
      ]);
      
      // Busca os profissionais criados
      profissionais = await Profissional.find({})
        .populate('localizacao')
        .select('-senha')
        .lean();
    }

    // Formata os dados
    const profissionaisFormatados = profissionais.map((prof) => {
      return {
        _id: prof._id,
        imagem: prof.foto || '/imagens/mulher.png',
        nome: prof.nome || 'Nome n√£o informado',
        localizacao: prof.localizacao ? 
          `${prof.localizacao.nome || ''} ${prof.localizacao.cidade || ''} ${prof.localizacao.estado || ''}`.trim() 
          : 'Local n√£o informado',
        experiencia: prof.desc || 'Experi√™ncia n√£o informada'
      };
    });

    res.status(200).json(profissionaisFormatados);

  } catch (error) {
    console.error('‚ùå Erro ao buscar profissionais:', error);
    
    // Fallback: retorna dados mock em caso de erro
    const profissionaisMock = [
      {
        _id: "1",
        imagem: "/imagens/mulher.png",
        nome: "Ana Silva",
        localizacao: "S√£o Paulo, SP",
        experiencia: "Enfermeira com 5 anos de experi√™ncia"
      },
      {
        _id: "2", 
        imagem: "/imagens/homem.png",
        nome: "Carlos Santos",
        localizacao: "Rio de Janeiro, RJ", 
        experiencia: "Cuidador especializado"
      }
    ];
    
    res.status(200).json(profissionaisMock);
  }
});

// ========== ROTAS DE AUTENTICA√á√ÉO (P√öBLICAS) ==========

// Rota para validar email
app.post('/api/auth/validar-email', async (req, res) => {
  try {
    console.log('üìß Validando email:', req.body.email);
    const { email } = req.body;
    
    if (!email) {
      return res.status(400).json({ 
        status: 'erro', 
        message: 'Email √© obrigat√≥rio' 
      });
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ 
        status: 'erro', 
        message: 'Formato de email inv√°lido' 
      });
    }

    const usuarioExistente = await Usuario.findOne({ email });
    const profissionalExistente = await Profissional.findOne({ email });

    if (usuarioExistente || profissionalExistente) {
      return res.status(200).json({ 
        status: 'sucesso', 
        valido: false,
        message: 'Email j√° est√° em uso' 
      });
    }

    res.status(200).json({ 
      status: 'sucesso', 
      valido: true,
      message: 'Email dispon√≠vel' 
    });
  } catch (error) {
    console.error('‚ùå Erro ao validar email:', error);
    res.status(500).json({ 
      status: 'erro', 
      message: error.message 
    });
  }
});

// Rota de Login - CORRIGIDA
app.post('/api/auth/login', async (req, res) => {
  try {
    console.log('üîê Tentativa de login:', req.body.email);
    const { email, senha } = req.body;
    
    if (!email || !senha) {
      return res.status(400).json({ 
        status: 'erro', 
        message: 'Email e senha s√£o obrigat√≥rios' 
      });
    }

    // Buscar usu√°rio por email - CORRE√á√ÉO: usar await e tratar erros
    const usuario = await Usuario.findOne({ email }).populate('localizacao').catch(err => {
      console.error('‚ùå Erro ao buscar usu√°rio:', err);
      return null;
    });
    
    if (usuario) {
      const senhaValida = await bcrypt.compare(senha, usuario.senha);
      if (senhaValida) {
        const token = jwt.sign(
          { 
            _id: usuario._id, 
            email: usuario.email,
            tipo: 'usuario'
          }, 
          process.env.JWT_SECRET || '7282',
          { expiresIn: '7d' }
        );

        const usuarioResposta = usuario.toObject();
        delete usuarioResposta.senha;

        console.log('‚úÖ Login usu√°rio bem-sucedido:', usuario.email);
        
        return res.status(200).json({ 
          status: 'sucesso', 
          data: usuarioResposta,
          token,
          message: 'Login realizado com sucesso'
        });
      }
    }

    // Se n√£o encontrou usu√°rio ou senha inv√°lida, buscar profissional
    console.log('üîç Buscando profissional...');
    const profissional = await Profissional.findOne({ email }).populate('localizacao').catch(err => {
      console.error('‚ùå Erro ao buscar profissional:', err);
      return null;
    });

    if (profissional) {
      const senhaValida = await bcrypt.compare(senha, profissional.senha);
      if (senhaValida) {
        const token = jwt.sign(
          { 
            _id: profissional._id, 
            email: profissional.email,
            tipo: 'profissional'
          }, 
          process.env.JWT_SECRET || '7282',
          { expiresIn: '7d' }
        );

        const profissionalResposta = profissional.toObject();
        delete profissionalResposta.senha;

        console.log('‚úÖ Login profissional bem-sucedido:', profissional.email);
        
        return res.status(200).json({ 
          status: 'sucesso', 
          data: profissionalResposta,
          token,
          message: 'Login realizado com sucesso'
        });
      }
    }

    console.log('‚ùå Credenciais inv√°lidas para:', email);
    return res.status(401).json({ 
      status: 'erro', 
      message: 'Credenciais inv√°lidas' 
    });

  } catch (error) {
    console.error('‚ùå Erro no login:', error);
    res.status(500).json({ 
      status: 'erro', 
      message: 'Erro interno do servidor' 
    });
  }
});

// Rota de Logout
app.post('/api/auth/logout', (req, res) => {
  try {
    console.log('üö™ Usu√°rio fez logout');
    res.status(200).json({ 
      status: 'sucesso', 
      message: 'Logout realizado com sucesso' 
    });
  } catch (error) {
    console.error('‚ùå Erro no logout:', error);
    res.status(500).json({ 
      status: 'erro', 
      message: error.message 
    });
  }
});

// ========== ROTAS DE CRIA√á√ÉO (P√öBLICAS) ==========

app.post('/api/usuarios', async (req, res) => {
  try {
    console.log('üë§ Criando novo usu√°rio:', req.body.email);
    const { email, senha, ...outrosDados } = req.body;

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ 
        status: 'erro', 
        message: 'Formato de email inv√°lido' 
      });
    }

    if (!senha || senha.length < 8) {
      return res.status(400).json({ 
        status: 'erro', 
        message: 'A senha deve ter pelo menos 8 caracteres' 
      });
    }

    const usuarioExistente = await Usuario.findOne({ email });
    const profissionalExistente = await Profissional.findOne({ email });

    if (usuarioExistente || profissionalExistente) {
      return res.status(400).json({ 
        status: 'erro', 
        message: 'Email j√° est√° em uso' 
      });
    }

    const salt = await bcrypt.genSalt(10);
    const senhaHash = await bcrypt.hash(senha, salt);

    const novoUsuario = await Usuario.create({
      ...outrosDados,
      email,
      senha: senhaHash
    });
    
    // Gerar token JWT ap√≥s registro
    const token = jwt.sign(
      { 
        _id: novoUsuario._id, 
        email: novoUsuario.email,
        tipo: 'usuario'
      }, 
      process.env.JWT_SECRET || '7282',
      { expiresIn: '7d' }
    );

    const usuarioResposta = novoUsuario.toObject();
    delete usuarioResposta.senha;
    
    console.log('‚úÖ Usu√°rio criado com sucesso:', novoUsuario.email);
    
    res.status(201).json({ 
      status: 'sucesso', 
      data: usuarioResposta,
      token,
      message: 'Usu√°rio registrado com sucesso'
    });
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio:', error);
    res.status(400).json({ 
      status: 'erro', 
      message: error.message 
    });
  }
});

app.post('/api/profissionais', async (req, res) => {
  try {
    console.log('üë®‚Äçüíº Criando novo profissional:', req.body.email);
    const { email, senha, ...outrosDados } = req.body;

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ 
        status: 'erro', 
        message: 'Formato de email inv√°lido' 
      });
    }

    if (!senha || senha.length < 8) {
      return res.status(400).json({ 
        status: 'erro', 
        message: 'A senha deve ter pelo menos 8 caracteres' 
      });
    }

    const usuarioExistente = await Usuario.findOne({ email });
    const profissionalExistente = await Profissional.findOne({ email });

    if (usuarioExistente || profissionalExistente) {
      return res.status(400).json({ 
        status: 'erro', 
        message: 'Email j√° est√° em uso' 
      });
    }

    const salt = await bcrypt.genSalt(10);
    const senhaHash = await bcrypt.hash(senha, salt);

    const novoProfissional = await Profissional.create({
      ...outrosDados,
      email,
      senha: senhaHash
    });
    
    // Gerar token JWT ap√≥s registro
    const token = jwt.sign(
      { 
        _id: novoProfissional._id, 
        email: novoProfissional.email,
        tipo: 'profissional'
      }, 
      process.env.JWT_SECRET || '7282',
      { expiresIn: '7d' }
    );

    const profissionalResposta = novoProfissional.toObject();
    delete profissionalResposta.senha;
    
    console.log('‚úÖ Profissional criado com sucesso:', novoProfissional.email);
    
    res.status(201).json({ 
      status: 'sucesso', 
      data: profissionalResposta,
      token,
      message: 'Profissional registrado com sucesso'
    });
  } catch (error) {
    console.error('‚ùå Erro ao criar profissional:', error);
    res.status(400).json({ 
      status: 'erro', 
      message: error.message 
    });
  }
});

// GET - Buscar todos os hist√≥ricos curriculares
app.get('/api/hcurriculares', async (req, res) => {
  try {
    console.log('üìö Buscando todos os hist√≥ricos curriculares');
    
    const { profissional } = req.query;
    let filtro = {};
    
    if (profissional) {
      filtro.profissional = profissional;
    }

    const historicos = await HCurricular.find(filtro).populate('profissional');
    
    res.status(200).json({ 
      status: 'sucesso', 
      data: historicos,
      total: historicos.length
    });
  } catch (error) {
    console.error('‚ùå Erro ao buscar hist√≥ricos curriculares:', error);
    res.status(500).json({ 
      status: 'erro', 
      message: error.message 
    });
  }
});

// GET - Buscar hist√≥rico curricular por ID
app.get('/api/hcurriculares/:id', async (req, res) => {
  try {
    console.log(`üìö Buscando hist√≥rico curricular: ${req.params.id}`);
    
    const historico = await HCurricular.findById(req.params.id).populate('profissional');
    
    if (!historico) {
      return res.status(404).json({ 
        status: 'erro', 
        message: 'Hist√≥rico curricular n√£o encontrado' 
      });
    }

    res.status(200).json({ 
      status: 'sucesso', 
      data: historico 
    });
  } catch (error) {
    console.error('‚ùå Erro ao buscar hist√≥rico curricular:', error);
    res.status(500).json({ 
      status: 'erro', 
      message: error.message 
    });
  }
});

// ========== APLICA MIDDLEWARE DE AUTENTICA√á√ÉO A PARTIR DAQUI ==========
app.use(verificarToken);

// ========== ROTAS PROTEGIDAS (AP√ìS MIDDLEWARE) ==========

// Rota para buscar perfil - CORRIGIDA
app.get('/api/auth/perfil/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üë§ Buscando perfil para o ID: ${id}`);

    // Tenta encontrar como Profissional primeiro
    let perfil = await Profissional.findById(id).select('-senha').populate('localizacao');
    let tipo = 'profissional';

    // Se n√£o for profissional, tenta encontrar como Usu√°rio
    if (!perfil) {
      perfil = await Usuario.findById(id).select('-senha').populate('localizacao');
      tipo = 'usuario';
    }

    if (!perfil) {
      return res.status(404).json({
        status: 'erro',
        message: 'Usu√°rio ou profissional n√£o encontrado.'
      });
    }

    console.log(`‚úÖ Perfil encontrado: ${perfil.nome} (Tipo: ${tipo})`);

    res.status(200).json({
      status: 'sucesso',
      data: perfil
    });

  } catch (error) {
    console.error('‚ùå Erro ao buscar perfil:', error);
    res.status(500).json({
      status: 'erro',
      message: 'Erro interno ao buscar perfil.'
    });
  }
});

// POST - Criar novo hist√≥rico curricular
app.post('/api/hcurriculares', async (req, res) => {
  try {
    console.log('üìù Criando novo hist√≥rico curricular');
    
    const { nome, desc, foto, profissional } = req.body;

    // Valida√ß√µes
    if (!nome) {
      return res.status(400).json({ 
        status: 'erro', 
        message: 'Nome √© obrigat√≥rio' 
      });
    }

    if (!profissional) {
      return res.status(400).json({ 
        status: 'erro', 
        message: 'Profissional √© obrigat√≥rio' 
      });
    }

    // Verificar se profissional existe
    const profissionalExiste = await Profissional.findById(profissional);
    if (!profissionalExiste) {
      return res.status(404).json({ 
        status: 'erro', 
        message: 'Profissional n√£o encontrado' 
      });
    }

    const novoHistorico = await HCurricular.create({
      nome,
      desc,
      foto,
      profissional
    });

    await novoHistorico.populate('profissional');

    console.log(`‚úÖ Hist√≥rico curricular criado: ${novoHistorico.nome}`);
    
    res.status(201).json({ 
      status: 'sucesso', 
      data: novoHistorico,
      message: 'Hist√≥rico curricular criado com sucesso'
    });
  } catch (error) {
    console.error('‚ùå Erro ao criar hist√≥rico curricular:', error);
    res.status(400).json({ 
      status: 'erro', 
      message: error.message 
    });
  }
});

// PUT - Atualizar hist√≥rico curricular
app.put('/api/hcurriculares/:id', async (req, res) => {
  try {
    console.log(`‚úèÔ∏è Atualizando hist√≥rico curricular: ${req.params.id}`);
    
    const { nome, desc } = req.body;

    const historicoAtualizado = await HCurricular.findByIdAndUpdate(
      req.params.id,
      { nome, desc },
      { new: true, runValidators: true }
    ).populate('profissional');

    if (!historicoAtualizado) {
      return res.status(404).json({ 
        status: 'erro', 
        message: 'Hist√≥rico curricular n√£o encontrado' 
      });
    }

    console.log(`‚úÖ Hist√≥rico curricular atualizado: ${historicoAtualizado.nome}`);
    
    res.status(200).json({ 
      status: 'sucesso', 
      data: historicoAtualizado,
      message: 'Hist√≥rico curricular atualizado com sucesso'
    });
  } catch (error) {
    console.error('‚ùå Erro ao atualizar hist√≥rico curricular:', error);
    res.status(400).json({ 
      status: 'erro', 
      message: error.message 
    });
  }
});

// DELETE - Deletar hist√≥rico curricular
app.delete('/api/hcurriculares/:id', async (req, res) => {
  try {
    console.log(`üóëÔ∏è Deletando hist√≥rico curricular: ${req.params.id}`);
    
    const historicoDeletado = await HCurricular.findByIdAndDelete(req.params.id);

    if (!historicoDeletado) {
      return res.status(404).json({ 
        status: 'erro', 
        message: 'Hist√≥rico curricular n√£o encontrado' 
      });
    }

    console.log(`‚úÖ Hist√≥rico curricular deletado: ${historicoDeletado.nome}`);
    
    res.status(200).json({ 
      status: 'sucesso', 
      message: 'Hist√≥rico curricular deletado com sucesso'
    });
  } catch (error) {
    console.error('‚ùå Erro ao deletar hist√≥rico curricular:', error);
    res.status(500).json({ 
      status: 'erro', 
      message: error.message 
    });
  }
});

// ========== ROTAS PARA LOCALIZA√á√ïES ==========

// GET - Listar todas as localiza√ß√µes
app.get('/api/localizacoes', async (req, res) => {
  try {
    console.log('üìç Buscando todas as localiza√ß√µes');
    const localizacoes = await Localizacao.find();
    res.status(200).json({
      status: 'sucesso',
      data: localizacoes,
      total: localizacoes.length
    });
  } catch (error) {
    console.error('‚ùå Erro ao buscar localiza√ß√µes:', error);
    res.status(500).json({
      status: 'erro',
      message: error.message
    });
  }
});

// GET - Buscar localiza√ß√£o por ID
app.get('/api/localizacoes/:id', async (req, res) => {
  try {
    console.log(`üìç Buscando localiza√ß√£o: ${req.params.id}`);
    const localizacao = await Localizacao.findById(req.params.id);
    if (!localizacao) {
      return res.status(404).json({
        status: 'erro',
        message: 'Localiza√ß√£o n√£o encontrada'
      });
    }
    res.status(200).json({
      status: 'sucesso',
      data: localizacao
    });
  } catch (error) {
    console.error('‚ùå Erro ao buscar localiza√ß√£o:', error);
    res.status(500).json({
      status: 'erro',
      message: error.message
    });
  }
});

// POST - Criar nova localiza√ß√£o
app.post('/api/localizacoes', async (req, res) => {
  try {
    console.log('üìç Criando nova localiza√ß√£o');
    const { nome, cep, cidade, estado } = req.body;

    if (!nome || !cidade || !estado) {
      return res.status(400).json({
        status: 'erro',
        message: 'Nome, cidade e estado s√£o obrigat√≥rios'
      });
    }

    const novaLocalizacao = await Localizacao.create({
      nome,
      cep,
      cidade,
      estado
    });

    console.log(`‚úÖ Localiza√ß√£o criada: ${novaLocalizacao.nome}`);
    res.status(201).json({
      status: 'sucesso',
      data: novaLocalizacao,
      message: 'Localiza√ß√£o criada com sucesso'
    });
  } catch (error) {
    console.error('‚ùå Erro ao criar localiza√ß√£o:', error);
    res.status(400).json({
      status: 'erro',
      message: error.message
    });
  }
});

// PUT - Atualizar localiza√ß√£o
app.put('/api/localizacoes/:id', async (req, res) => {
  try {
    console.log(`‚úèÔ∏è Atualizando localiza√ß√£o: ${req.params.id}`);
    const { nome, cep, cidade, estado } = req.body;

    const localizacaoAtualizada = await Localizacao.findByIdAndUpdate(
      req.params.id,
      { nome, cep, cidade, estado },
      { new: true, runValidators: true }
    );

    if (!localizacaoAtualizada) {
      return res.status(404).json({
        status: 'erro',
        message: 'Localiza√ß√£o n√£o encontrada'
      });
    }

    console.log(`‚úÖ Localiza√ß√£o atualizada: ${localizacaoAtualizada.nome}`);
    res.status(200).json({
      status: 'sucesso',
      data: localizacaoAtualizada,
      message: 'Localiza√ß√£o atualizada com sucesso'
    });
  } catch (error) {
    console.error('‚ùå Erro ao atualizar localiza√ß√£o:', error);
    res.status(400).json({
      status: 'erro',
      message: error.message
    });
  }
});

// DELETE - Deletar localiza√ß√£o
app.delete('/api/localizacoes/:id', async (req, res) => {
  try {
    console.log(`üóëÔ∏è Deletando localiza√ß√£o: ${req.params.id}`);
    const localizacaoDeletada = await Localizacao.findByIdAndDelete(req.params.id);

    if (!localizacaoDeletada) {
      return res.status(404).json({
        status: 'erro',
        message: 'Localiza√ß√£o n√£o encontrada'
      });
    }

    console.log(`‚úÖ Localiza√ß√£o deletada: ${localizacaoDeletada.nome}`);
    res.status(200).json({
      status: 'sucesso',
      message: 'Localiza√ß√£o deletada com sucesso'
    });
  } catch (error) {
    console.error('‚ùå Erro ao deletar localiza√ß√£o:', error);
    res.status(500).json({
      status: 'erro',
      message: error.message
    });
  }
});

// ========== ROTAS PARA HIST√ìRICOS PROFISSIONAIS (HProfissional) ==========

// GET - Buscar todos os hist√≥ricos profissionais
app.get('/api/hprofissionais', async (req, res) => {
  try {
    console.log('üíº Buscando todos os hist√≥ricos profissionais');
    
    const { profissional } = req.query;
    let filtro = {};
    
    if (profissional) {
      filtro.profissional = profissional;
    }

    const historicos = await HProfissional.find(filtro).populate('profissional');
    
    res.status(200).json({ 
      status: 'sucesso', 
      data: historicos,
      total: historicos.length
    });
  } catch (error) {
    console.error('‚ùå Erro ao buscar hist√≥ricos profissionais:', error);
    res.status(500).json({ 
      status: 'erro', 
      message: error.message 
    });
  }
});

// GET - Buscar hist√≥rico profissional por ID
app.get('/api/hprofissionais/:id', async (req, res) => {
  try {
    console.log(`üíº Buscando hist√≥rico profissional: ${req.params.id}`);
    
    const historico = await HProfissional.findById(req.params.id).populate('profissional');
    
    if (!historico) {
      return res.status(404).json({ 
        status: 'erro', 
        message: 'Hist√≥rico profissional n√£o encontrado' 
      });
    }

    res.status(200).json({ 
      status: 'sucesso', 
      data: historico 
    });
  } catch (error) {
    console.error('‚ùå Erro ao buscar hist√≥rico profissional:', error);
    res.status(500).json({ 
      status: 'erro', 
      message: error.message 
    });
  }
});

// POST - Criar novo hist√≥rico profissional
app.post('/api/hprofissionais', async (req, res) => {
  try {
    console.log('üìù Criando novo hist√≥rico profissional');
    
    const { nome, desc, foto, profissional } = req.body;

    // Valida√ß√µes
    if (!nome) {
      return res.status(400).json({ 
        status: 'erro', 
        message: 'Nome √© obrigat√≥rio' 
      });
    }

    if (!profissional) {
      return res.status(400).json({ 
        status: 'erro', 
        message: 'Profissional √© obrigat√≥rio' 
      });
    }

    // Verificar se profissional existe
    const profissionalExiste = await Profissional.findById(profissional);
    if (!profissionalExiste) {
      return res.status(404).json({ 
        status: 'erro', 
        message: 'Profissional n√£o encontrado' 
      });
    }

    const novoHistorico = await HProfissional.create({
      nome,
      desc,
      foto,
      profissional
    });

    await novoHistorico.populate('profissional');

    console.log(`‚úÖ Hist√≥rico profissional criado: ${novoHistorico.nome}`);
    
    res.status(201).json({ 
      status: 'sucesso', 
      data: novoHistorico,
      message: 'Hist√≥rico profissional criado com sucesso'
    });
  } catch (error) {
    console.error('‚ùå Erro ao criar hist√≥rico profissional:', error);
    res.status(400).json({ 
      status: 'erro', 
      message: error.message 
    });
  }
});

// PUT - Atualizar hist√≥rico profissional
app.put('/api/hprofissionais/:id', async (req, res) => {
  try {
    console.log(`‚úèÔ∏è Atualizando hist√≥rico profissional: ${req.params.id}`);
    
    const { nome, desc, foto } = req.body;

    const historicoAtualizado = await HProfissional.findByIdAndUpdate(
      req.params.id,
      { nome, desc, foto },
      { new: true, runValidators: true }
    ).populate('profissional');

    if (!historicoAtualizado) {
      return res.status(404).json({ 
        status: 'erro', 
        message: 'Hist√≥rico profissional n√£o encontrado' 
      });
    }

    console.log(`‚úÖ Hist√≥rico profissional atualizado: ${historicoAtualizado.nome}`);
    
    res.status(200).json({ 
      status: 'sucesso', 
      data: historicoAtualizado,
      message: 'Hist√≥rico profissional atualizado com sucesso'
    });
  } catch (error) {
    console.error('‚ùå Erro ao atualizar hist√≥rico profissional:', error);
    res.status(400).json({ 
      status: 'erro', 
      message: error.message 
    });
  }
});

// DELETE - Deletar hist√≥rico profissional
app.delete('/api/hprofissionais/:id', async (req, res) => {
  try {
    console.log(`üóëÔ∏è Deletando hist√≥rico profissional: ${req.params.id}`);
    
    const historicoDeletado = await HProfissional.findByIdAndDelete(req.params.id);

    if (!historicoDeletado) {
      return res.status(404).json({ 
        status: 'erro', 
        message: 'Hist√≥rico profissional n√£o encontrado' 
      });
    }

    console.log(`‚úÖ Hist√≥rico profissional deletado: ${historicoDeletado.nome}`);
    
    res.status(200).json({ 
      status: 'sucesso', 
      message: 'Hist√≥rico profissional deletado com sucesso'
    });
  } catch (error) {
    console.error('‚ùå Erro ao deletar hist√≥rico profissional:', error);
    res.status(500).json({ 
      status: 'erro', 
      message: error.message 
    });
  }
});

// Rota para 404 - deve ser a √∫ltima
app.use('*', (req, res) => {
  console.log(`‚ùå Rota n√£o encontrada: ${req.method} ${req.originalUrl}`);
  res.status(404).json({ 
    status: 'erro',
    message: 'Rota n√£o encontrada' 
  });
});

// Middleware de tratamento de erros
app.use((error, req, res, next) => {
  console.error('üí• Erro n√£o tratado:', error);
  res.status(500).json({
    status: 'erro',
    message: 'Erro interno do servidor'
  });
});

const PORT = process.env.PORT || 3001;
const server = app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ Servidor rodando na porta http://localhost:${PORT}`);
    console.log(`üåê Ambiente: ${process.env.NODE_ENV || 'desenvolvimento'}`);
});

// Configura√ß√£o para encerramento gracioso
process.on('SIGINT', () => {
    console.log('\nüî¥ Servidor encerrado pelo usu√°rio (Ctrl+C)');
    mongoose.connection.close(() => {
        console.log('‚úÖ Conex√£o com MongoDB fechada');
        server.close(() => {
            process.exit(0);
        });
    });
});